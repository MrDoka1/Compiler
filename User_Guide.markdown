# Руководство пользователя по языку программирования

Добро пожаловать в руководство по использованию нашего языка программирования! Этот язык предназначен для написания простых программ с использованием базовых типов данных, условных операторов, циклов и функций. Он компилируется в байт-код Java и поддерживает базовые вычисления, ввод-вывод и логические операции. Это руководство поможет вам освоить синтаксис языка, понять доступные конструкции и начать писать свои программы. Никаких предварительных знаний не требуется — мы объясним всё шаг за шагом.

## 1. Обзор языка

Язык ориентирован на начинающих программистов и поддерживает:
- **Типы данных**: целые числа (`int`), вещественные числа (`float`), логические значения (`boolean`), отсутствие возвращаемого значения (`void`).
- **Конструкции**: функции (методы), условные операторы (`if`, `else`), циклы (`for`, `while`, `do-while`), операторы `break` и `continue`.
- **Ввод-вывод**: встроенные функции `print`, `intInput`, `floatInput` для вывода данных и чтения чисел с консоли.
- **Операторы**: арифметические (`+`, `-`, `*`, `/`), сравнения (`==`, `!=`, `<`, `>`, `<=`, `>=`), логические (`&&`, `||`, `!`).

Программа состоит из одного или нескольких методов (функций), один из которых должен называться `main` и служить точкой входа. Код компилируется с помощью предоставленного компилятора, который преобразует его в исполняемый файл Java.

## 2. Установка и запуск

### Требования
- Java Development Kit (JDK) версии 8 или выше.
- Компилятор языка (поставляется в виде JAR-файлов, включая зависимости `jackson-databind.jar` и `javassist.jar`).
- Текстовый редактор для написания кода (например, Notepad++, VS Code).

### Установка
1. Скачайте архив компилятора.
2. Убедитесь, что JDK установлен. Проверьте командой:
   ```bash
   java -version
   ```
3. Распакуйте архив в удобную папку.
4. Скомпилируйте проект в jar:
    ```bash
   mvn clean package
   ```
5. Создастся Compiler-1.0.jar

### Написание программы
1. Создайте текстовый файл с расширением `.txt` (например, `program.txt`).
2. Напишите код программы, следуя синтаксису, описанному ниже.
3. Сохраните файл.

### Компиляция и запуск
1. Откройте терминал и перейдите в папку с компилятором.
2. Скомпилируйте программу:
   ```bash
   java -jar Compiler-1.0.jar program.txt
   ```
   
3. Компилятор создаст файл `Main.class`. Запустите его:
   ```bash
   java Main
   ```
4. При успешной компиляции программа выполнится. В случае ошибок компилятор выведет сообщения об ошибках в консоль.

**Примечание**: Компилятор также создаёт файлы `ast.json` (синтаксическое дерево) и `ast-optimized.json` (оптимизированное дерево) для отладки.

## 3. Синтаксис языка

### 3.1. Структура программы
Программа состоит из одного или нескольких методов. Каждый метод объявляется с возвращаемым типом, именем, параметрами и телом. Точка входа — метод `main` с типом `void`.

**Пример программы**:
```c
int main() {
    print("Hello, World!");
    return 0;
}
```

- Метод `main` обязателен.
- Каждый метод заключается в фигурные скобки `{}`.
- Операторы заканчиваются точкой с запятой `;`.

### 3.2. Типы данных
Язык поддерживает следующие типы:
- `int`: Целое число (например, `5`, `-10`).
- `float`: Вещественное число (например, `3.14`, `-0.5`).
- `boolean`: Логическое значение (`true` или `false`).
- `void`: Отсутствие возвращаемого значения (используется для методов).

### 3.3. Переменные
Переменные объявляются с указанием типа и имени. Имя переменной должно начинаться с буквы или подчеркивания `_` и может содержать буквы, цифры и `_`.

**Синтаксис**:
```c
тип имя = значение;
```
или
```c
тип имя;
```

**Пример**:
```c
int x = 10;
float pi = 3.14;
boolean isActive = true;
int y; // Объявление без инициализации
```

- Переменные можно изменять с помощью присваивания:
  ```c
  x = 20;
  ```

### 3.4. Методы
Методы (функции) объявляются с возвращаемым типом, именем, параметрами и телом.

**Синтаксис**:
```c
тип_возврата имя(тип1 параметр1, тип2 параметр2) {
    операторы;
    return значение; // Если тип не void
}
```

**Пример**:
```c
int add(int a, int b) {
    return a + b;
}

int main() {
    int result = add(3, 4);
    print(result); // Вывод: 7
    return 0;
}
```

- Если метод имеет тип `void`, оператор `return` можно опустить или использовать без значения:
  ```c
  return;
  ```

### 3.5. Операторы
Язык поддерживает следующие операторы:

- **Арифметические**:
  - `+` (сложение)
  - `-` (вычитание)
  - `*` (умножение)
  - `/` (деление)
- **Сравнения**:
  - `==` (равно)
  - `!=` (не равно)
  - `<` (меньше)
  - `>` (больше)
  - `<=` (меньше или равно)
  - `>=` (больше или равно)
- **Логические**:
  - `&&` (логическое И)
  - `||` (логическое ИЛИ)
  - `!` (логическое НЕ)

**Пример**:
```c
int x = 5;
int y = 10;
boolean result = (x < y) && (y != 0); // true
```

### 3.6. Условные операторы
Используются для выполнения кода в зависимости от условия.

**Синтаксис**:
```c
if (условие) {
    операторы;
} else {
    операторы;
}
```

**Пример**:
```c
int x = 5;
if (x > 0) {
    print("Positive");
} else {
    print("Non-positive");
}
```

- Блок `else` необязателен.
- Условие должно возвращать `boolean`.

### 3.7. Циклы
Поддерживаются три типа циклов: `for`, `while`, `do-while`.

#### Цикл `for`
**Синтаксис**:
```c
for (объявление; условие; шаг) {
    операторы;
}
```

**Пример**:
```c
for (int i = 0; i < 5; i = i + 1) {
    print(i); // Вывод: 0, 1, 2, 3, 4
}
```

#### Цикл `while`
**Синтаксис**:
```c
while (условие) {
    операторы;
}
```

**Пример**:
```c
int i = 0;
while (i < 5) {
    print(i); // Вывод: 0, 1, 2, 3, 4
    i = i + 1;
}
```

#### Цикл `do-while`
**Синтаксис**:
```c
do {
    операторы;
} while (условие);
```

**Пример**:
```c
int i = 0;
do {
    print(i); // Вывод: 0, 1, 2, 3, 4
    i = i + 1;
} while (i < 5);
```

#### Операторы `break` и `continue`
- `break`: Прерывает цикл.
- `continue`: Переходит к следующей итерации.

**Пример**:
```c
for (int i = 0; i < 5; i = i + 1) {
    if (i == 3) {
        break; // Выход из цикла
    }
    print(i); // Вывод: 0, 1, 2
}
```

### 3.8. Встроенные функции
Язык предоставляет функции для ввода-вывода:

- `print(значение)`: Выводит значение в консоль.
  - Аргумент: `int`, `float`, `boolean` или строка (например, `"Hello"`).
  - Пример: `print("Result: "); print(42);`
- `intInput()`: Считывает целое число с консоли.
  - Пример: `int x = intInput();`
- `floatInput()`: Считывает вещественное число с консоли.
  - Пример: `float y = floatInput();`

**Примечание**: Строки поддерживаются только как аргументы `print`.

## 4. Примеры программ

### Пример 1: Простой вывод
```c
int main() {
    print("Hello, World!");
    return 0;
}
```

**Результат**:
```
Hello, World!
```

### Пример 2: Сумма чисел
```c
int main() {
    int a = intInput();
    int b = intInput();
    int sum = a + b;
    print("Sum: ");
    print(sum);
    return 0;
}
```

**Ввод**:
```
3
4
```

**Результат**:
```
Sum: 7
```

### Пример 3: Факториал
```c
int factorial(int n) {
    if (n == 0) {
        return 1;
    }
    return n * factorial(n - 1);
}

int main() {
    int n = intInput();
    int result = factorial(n);
    print("Factorial: ");
    print(result);
    return 0;
}
```

**Ввод**:
```
5
```

**Результат**:
```
Factorial: 120
```

### Пример 4: Чётные числа
```c
int main() {
    for (int i = 1; i <= 10; i = i + 1) {
        if (i / 2 * 2 == i) {
            print(i); // Вывод: 2, 4, 6, 8, 10
        }
    }
    return 0;
}
```

## 5. Ошибки и их исправление

Компилятор сообщает об ошибках в коде. Вот примеры типичных ошибок:

1. **Лексическая ошибка**:
   ```c
   int x = @5;
   ```
   **Ошибка**: `Error: Unknown character '@' at line 1, column 9`
   **Исправление**: Удалите недопустимый символ:
   ```c
   int x = 5;
   ```

2. **Синтаксическая ошибка**:
   ```c
   int main() {
       int x = 5
   }
   ```
   **Ошибка**: `Syntax error: missing semicolon in line 2`
   **Исправление**: Добавьте точку с запятой:
   ```c
   int x = 5;
   ```

3. **Семантическая ошибка**:
   ```c
   int main() {
       int x = y;
       return 0;
   }
   ```
   **Ошибка**: `The variable 'y' not declared. Error in line: 2.`
   **Исправление**: Объявите переменную `y`:
   ```c
   int y = 10;
   int x = y;
   ```

4. **Отсутствие возврата**:
   ```c
   int main() {
       int x = 5;
   }
   ```
   **Ошибка**: `Method 'main' does not return a value on all execution paths.`
   **Исправление**: Добавьте `return`:
   ```c
   return 0;
   ```

## 6. Ограничения языка

- Поддерживаются только типы `int`, `float`, `boolean`, `void`.
- Строки можно использовать только в `print`.
- Нет поддержки массивов, структур или классов.
- Все переменные и методы должны быть объявлены до использования.
- Компилятор останавливается при первой ошибке.

## 7. Советы для начинающих

1. **Проверяйте синтаксис**: Убедитесь, что все операторы заканчиваются `;`, а блоки заключены в `{}`.
2. **Объявляйте переменные**: Все переменные должны быть объявлены с типом перед использованием.
3. **Тестируйте постепенно**: Пишите код небольшими частями и проверяйте его.
4. **Используйте комментарии**: Добавляйте пояснения с помощью `//` или `/* */`.
   ```c
   // Это комментарий
   /* Это
      многострочный
      комментарий */
   ```
5. **Читайте сообщения об ошибках**: Они указывают строку и причину проблемы.

## 8. Дополнительные ресурсы

- Исходный код компилятора (если доступен) для изучения внутренней работы.
- Примеры программ в папке с компилятором.
- Документация Java (для понимания байт-кода, если вы хотите углубиться).

Если у вас есть вопросы или вы хотите расширить язык, обратитесь к разработчикам компилятора. Удачного программирования!